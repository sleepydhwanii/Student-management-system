#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_STUDENTS 100
#define MAX_NAME_LENGTH 50

typedef struct {
    int roll_number;
    char name[MAX_NAME_LENGTH];
    int physics_marks;
    int chemistry_marks;
    int maths_marks;
    char result[10];
    float average;
    char grade;
} Student;

Student students[MAX_STUDENTS];
int student_count = 0;

int is_valid_name(char *name) {
    for (int i = 0; name[i] != '\0'; i++) {
        if (isdigit(name[i])) {
            return 0;
        }
    }
    return 1;
}

int is_valid_number(char *str) {
    for (int i = 0; str[i] != '\0'; i++) {
        if (!isdigit(str[i])) {
            return 0;
        }
    }
    return 1;
}

int is_valid_marks(int marks) {
    return marks >= 0 && marks <= 100;
}

void calculate_result(Student *student) {
    if (student->physics_marks < 33 || student->chemistry_marks < 33 || student->maths_marks < 33) {
        strcpy(student->result, "Fail");
    } else {
        strcpy(student->result, "Pass");
    }
    student->average = (student->physics_marks + student->chemistry_marks + student->maths_marks) / 3.0;

    if (student->average >= 90) {
        student->grade = 'A';
    } else if (student->average >= 75) {
        student->grade = 'B';
    } else if (student->average >= 60) {
        student->grade = 'C';
    } else if (student->average >= 45) {
        student->grade = 'D';
    } else if (student->average >= 33) {
        student->grade = 'E';
    } else {
        student->grade = 'F';
    }
}

void add_student() {
    if (student_count >= MAX_STUDENTS) {
        printf("Student limit reached. Cannot add more students.\n");
        return;
    }
    Student new_student;
    char roll_number_str[10];
    
    printf("Enter Roll Number: ");
    scanf("%s", roll_number_str);
    if (!is_valid_number(roll_number_str)) {
        printf("Invalid roll number. Must be numeric.\n");
        return;
    }
    new_student.roll_number = atoi(roll_number_str);
    getchar();
    
    printf("Enter Name: ");
    fgets(new_student.name, MAX_NAME_LENGTH, stdin);
    new_student.name[strcspn(new_student.name, "\n")] = '\0';
    if (!is_valid_name(new_student.name)) {
        printf("Invalid name. Must not contain numbers.\n");
        return;
    }

    printf("Enter Physics Marks: ");
    scanf("%d", &new_student.physics_marks);
    printf("Enter Chemistry Marks: ");
    scanf("%d", &new_student.chemistry_marks);
    printf("Enter Maths Marks: ");
    scanf("%d", &new_student.maths_marks);
    
    calculate_result(&new_student);
    students[student_count++] = new_student;
    printf("Student added successfully.\n");
}

void remove_student() {
    int roll_number;
    printf("Enter Roll Number of student to remove: ");
    scanf("%d", &roll_number);
    for (int i = 0; i < student_count; i++) {
        if (students[i].roll_number == roll_number) {
            for (int j = i; j < student_count - 1; j++) {
                students[j] = students[j + 1];
            }
            student_count--;
            printf("Student removed successfully.\n");
            return;
        }
    }
    printf("Student not found.\n");
}

void edit_student_marks() {
    int roll_number;
    printf("Enter Roll Number of student to edit marks: ");
    scanf("%d", &roll_number);
    for (int i = 0; i < student_count; i++) {
        if (students[i].roll_number == roll_number) {
            printf("Editing marks for %s (Roll No: %d)\n", students[i].name, students[i].roll_number);
            int choice, new_marks;
            while (1) {
                printf("Choose subject to edit:\n");
                printf("1. Physics\n2. Chemistry\n3. Maths\n4. Done\nEnter your choice: ");
                scanf("%d", &choice);
                if (choice == 4) break;
                printf("Enter new marks: ");
                scanf("%d", &new_marks);
                if (!is_valid_marks(new_marks)) {
                    printf("Invalid marks. Must be between 0 and 100.\n");
                    continue;
                }
                switch (choice) {
                    case 1: students[i].physics_marks = new_marks; break;
                    case 2: students[i].chemistry_marks = new_marks; break;
                    case 3: students[i].maths_marks = new_marks; break;
                    default: printf("Invalid choice. Try again.\n");
                }
            }
            calculate_result(&students[i]);
            printf("Student marks updated successfully.\n");
            return;
        }
    }
    printf("Student not found.\n");
}

void view_all_data() {
    printf("%-10s %-20s %-15s %-15s %-15s %-10s %-10s %-10s\n", "Roll No", "Name", "Physics", "Chemistry", "Maths", "Result", "Average", "Grade");
    for (int i = 0; i < student_count; i++) {
        printf("%-10d %-20s %-15d %-15d %-15d %-10s %-10.2f %-10c\n", students[i].roll_number, students[i].name, students[i].physics_marks, students[i].chemistry_marks, students[i].maths_marks, students[i].result, students[i].average, students[i].grade);
    }
}
int main() {
    int choice;
    while (1) {
        printf("Student Management System\n");
        printf("1. Add Student\n2. Remove Student\n3. Edit Student Marks\n4. View All Data\n5. Exit\nEnter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1: add_student(); break;
            case 2: remove_student(); break;
            case 3: edit_student_marks(); break;
            case 4: view_all_data(); break;
            case 5: exit(0);
            default: printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}
